# not null
# unique
# default
# auto_increment
# primary key
# foreign key

create table press(
    id int primary key auto_increment,
    name char(12) not null,
    addr varchar(18)
);

create table book(
    id int primary key auto_increment,
    name char(12) not null,
    price float(5, 2) not null,
    press_id int,
    foreign key(press_id) references press(id)
    on delete cascade  -- 不加的话，需先删除外键，再添加
    on update cascade
);


insert into press values
    ('人民文学', '北京×××'),
    ('甲骨文', '北京×××'),
    ('浙江古籍', '杭州×××');

insert into book values
    ('汪曾祺散文', 23.23, 1),
    ('梁秋实散文', 23.17, 1),
    ('条顿骑士团', 63.21, 2),
    ('医院骑士团', 51.23, 2),
    ('西湖梦寻', 13.23, 3);

insert into book(name, price, press_id) values('哈利波特', 123.12, 1);

delete from press where id = 1;




create table class(
    cid int primary key auto_increment,
    caption char(10) not null
);

insert into class(caption) values('三年二班'), ('一年三班'), ('三年一班');

create table student(
    sid int primary key auto_increment,
    sname char(10) not null,
    gender enum('男', '女'),
    class_id int,
    foreign key(class_id) references class(cid)
    on delete cascade
    on update cascade
);

insert into student(sname, gender, class_id) values('钢弹', '女', 1), ('铁锤', '女', 1), ('山炮', '男', 2);

create table teacher(
    tid int primary key auto_increment,
    tname char(10) not null
);

insert into teacher(tname) values('波多'), ('北岛'), ('风间');

create table course(
    cid int primary key auto_increment,
    cname char(10) not null,
    teacher_id int,
    foreign key(teacher_id) references teacher(tid)
    on delete cascade
    on update cascade
);

insert into course(cname, teacher_id) values('生物', 1), ('体育', 1), ('物理', 2);

create table score(
    sid int primary key auto_increment,
    student_id int,
    course_id int,
    score int not null,
    foreign key(student_id) references student(sid),
    foreign key(course_id) references course(cid)
) engine=innodb default charset=utf8;


insert into score(student_id, course_id, score) values(1, 1, 60), (1, 2, 59), (2, 2, 100);


-- 1、查询男女生人数
select gender, count(gender)
from student
group by gender;

--2、查询姓“张”的学生名单；
insert into student(sname, gender, class_id) values("张羽中", "男", 3), ("张习习", "男", 3), ("张宛女", "女", 1);

select *
from student
where sname like "张%";

--3、课程平均分从高到低显示
insert into score(student_id, course_id, score) values(1, 3, 70), (2, 1, 59), (2, 3, 89),
(3, 1, 50), (3, 2, 29), (3, 3, 78),
(4, 1, 73), (4, 2, 69), (4, 3, 90),
(5, 1, 72), (5, 2, 89), (5, 3, 100),
(6, 1, 71), (6, 2, 79), (6, 3, 91);


select c.cname, avg(s.score) as avg_score
from score s
join course c
on s.course_id = c.cid
group by s.course_id
order by avg_score;

--4、查询有课程成绩小于60分的同学的学号、姓名；
select distinct std.sid, std.sname
from score s
join student std
on s.student_id = std.sid
where s.score < 60;

--5、查询至少有一门课与学号为1的同学所学课程相同的同学的学号和姓名；
delete from score where student_id = 1 and course_id = 3;

insert into student(sname, gender, class_id) values
("余月", "女", 1),
("徐马", "男", 3);

insert into score(student_id, course_id, score) values
(7, 3, 90),
(8, 3, 93);

--学号为1的同学所学的课程
--select course_id from score where student_id = 1;

select sid, sname
from student s
join
(
    select distinct student_id
    from score
    where course_id in (
        select course_id
        from score
        where student_id = 1
    )
      and student_id <> 1
) a
on s.sid = a.student_id;

可以写更好

select distinct s.student_id
from score s
join (select course_id from score where student_id = 1) a
    using(course_id)
where s.student_id <> 1;






--6、查询出只选修了一门课程的全部学生的学号和姓名；
select student_id, sname, count(course_id) course_num
from score s
join student std
    on s.student_id = std.sid
group by student_id
having course_num = 1;


--7、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；
--最高分
select course_id, score
from score s
where score = (select max(score)
       from score
       where course_id = s.course_id);


select course_id, max(score) as highest, min(score) as lowest
from score
group by course_id;


8、查询课程编号“2”的成绩比课程编号“1”课程低的所有同学的学号、姓名；  ????
select *
from score
group by student_id
having



9、查询“生物”课程比“物理”课程成绩高的所有学生的学号；   ???





--10、查询平均成绩大于60分的同学的学号和平均成绩;
select student_id, avg(score) as avg_score
from score
group by student_id
having avg_score > 60;


--11、查询所有同学的学号、姓名、选课数、总成绩；
select sname, student_id, count(course_id), sum(score)
from student std
join score s
    on std.sid = s.student_id
group by s.student_id;


--12、查询姓“李”的老师的个数；
insert into teacher(tname) values("张三"),
("李")
("李一"),
("李一一");

select count(tname)
from teacher
where tname like "李%";  -- %任意个字符，_一个字符


--13、查询没学过“波多老师”课的同学的学号、姓名；
select sid, sname
from student s
left join (
    select distinct student_id
    from score
    where course_id in
        (
            select cid
            from course c
            join teacher t
                on c.teacher_id = t.tid
            where tname = "波多"
        )
) a
    on s.sid = a.student_id
where a.student_id is null;


--14、查询学过“1”并且也学过编号“2”课程的同学的学号、姓名；
select s1.student_id, std.sname
from score s1
join score s2
    on s1.student_id = s2.student_id
join student std
    on s1.student_id = std.sid
where s1.course_id = 1 and s2.course_id = 2;



15、查询学过“波多老师”所教的所有课的同学的学号、姓名；
delete from score where sid = 14;


--启动服务
net start mysql
--连接 登录
mysql -u root -p

-- 切换schema
use python_mysql1;
-- 初始化数据
source c:/users/xuteng/desktop/init.sql

----------------------------------------------------

/*
 数据导入：
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50624
 Source Host           : localhost
 Source Database       : sqlexam

 Target Server Type    : MySQL
 Target Server Version : 50624
 File Encoding         : utf-8

 Date: 10/21/2016 06:46:46 AM
*/

SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `class`
-- ----------------------------
DROP TABLE IF EXISTS `class`;
CREATE TABLE `class` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `caption` varchar(32) NOT NULL,
  PRIMARY KEY (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `class`
-- ----------------------------
BEGIN;
INSERT INTO `class` VALUES ('1', '三年二班'), ('2', '三年三班'), ('3', '一年二班'), ('4', '二年九班');
COMMIT;

-- ----------------------------
--  Table structure for `course`
-- ----------------------------
DROP TABLE IF EXISTS `course`;
CREATE TABLE `course` (
  `cid` int(11) NOT NULL AUTO_INCREMENT,
  `cname` varchar(32) NOT NULL,
  `teacher_id` int(11) NOT NULL,
  PRIMARY KEY (`cid`),
  KEY `fk_course_teacher` (`teacher_id`),
  CONSTRAINT `fk_course_teacher` FOREIGN KEY (`teacher_id`) REFERENCES `teacher` (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `course`
-- ----------------------------
BEGIN;
INSERT INTO `course` VALUES ('1', '生物', '1'), ('2', '物理', '2'), ('3', '体育', '3'), ('4', '美术', '2');
COMMIT;

-- ----------------------------
--  Table structure for `score`
-- ----------------------------
DROP TABLE IF EXISTS `score`;
CREATE TABLE `score` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `student_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `num` int(11) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_score_student` (`student_id`),
  KEY `fk_score_course` (`course_id`),
  CONSTRAINT `fk_score_course` FOREIGN KEY (`course_id`) REFERENCES `course` (`cid`),
  CONSTRAINT `fk_score_student` FOREIGN KEY (`student_id`) REFERENCES `student` (`sid`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `score`
-- ----------------------------
BEGIN;
INSERT INTO `score` VALUES ('1', '1', '1', '10'), ('2', '1', '2', '9'), ('5', '1', '4', '66'), ('6', '2', '1', '8'), ('8', '2', '3', '68'), ('9', '2', '4', '99'), ('10', '3', '1', '77'), ('11', '3', '2', '66'), ('12', '3', '3', '87'), ('13', '3', '4', '99'), ('14', '4', '1', '79'), ('15', '4', '2', '11'), ('16', '4', '3', '67'), ('17', '4', '4', '100'), ('18', '5', '1', '79'), ('19', '5', '2', '11'), ('20', '5', '3', '67'), ('21', '5', '4', '100'), ('22', '6', '1', '9'), ('23', '6', '2', '100'), ('24', '6', '3', '67'), ('25', '6', '4', '100'), ('26', '7', '1', '9'), ('27', '7', '2', '100'), ('28', '7', '3', '67'), ('29', '7', '4', '88'), ('30', '8', '1', '9'), ('31', '8', '2', '100'), ('32', '8', '3', '67'), ('33', '8', '4', '88'), ('34', '9', '1', '91'), ('35', '9', '2', '88'), ('36', '9', '3', '67'), ('37', '9', '4', '22'), ('38', '10', '1', '90'), ('39', '10', '2', '77'), ('40', '10', '3', '43'), ('41', '10', '4', '87'), ('42', '11', '1', '90'), ('43', '11', '2', '77'), ('44', '11', '3', '43'), ('45', '11', '4', '87'), ('46', '12', '1', '90'), ('47', '12', '2', '77'), ('48', '12', '3', '43'), ('49', '12', '4', '87'), ('52', '13', '3', '87');
COMMIT;

-- ----------------------------
--  Table structure for `student`
-- ----------------------------
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
  `sid` int(11) NOT NULL AUTO_INCREMENT,
  `gender` char(1) NOT NULL,
  `class_id` int(11) NOT NULL,
  `sname` varchar(32) NOT NULL,
  PRIMARY KEY (`sid`),
  KEY `fk_class` (`class_id`),
  CONSTRAINT `fk_class` FOREIGN KEY (`class_id`) REFERENCES `class` (`cid`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `student`
-- ----------------------------
BEGIN;
INSERT INTO `student` VALUES ('1', '男', '1', '理解'), ('2', '女', '1', '钢蛋'), ('3', '男', '1', '张三'), ('4', '男', '1', '张一'), ('5', '女', '1', '张二'), ('6', '男', '1', '张四'), ('7', '女', '2', '铁锤'), ('8', '男', '2', '李三'), ('9', '男', '2', '李一'), ('10', '女', '2', '李二'), ('11', '男', '2', '李四'), ('12', '女', '3', '如花'), ('13', '男', '3', '刘三'), ('14', '男', '3', '刘一'), ('15', '女', '3', '刘二'), ('16', '男', '3', '刘四');
COMMIT;

-- ----------------------------
--  Table structure for `teacher`
-- ----------------------------
DROP TABLE IF EXISTS `teacher`;
CREATE TABLE `teacher` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `tname` varchar(32) NOT NULL,
  PRIMARY KEY (`tid`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
--  Records of `teacher`
-- ----------------------------
BEGIN;
INSERT INTO `teacher` VALUES ('1', '张磊老师'), ('2', '李平老师'), ('3', '刘海燕老师'), ('4', '朱云海老师'), ('5', '李杰老师');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;


--------------------------------------------




--作业
--1、查询没有学全所有课的同学的学号、姓名；
select sid, sname
from student std
join
    (select student_id, count(course_id) course_taked
    from score
    group by student_id
    having course_taked < (
        select count(distinct cid)
        from course
    )) a
    on std.sid = a.student_id;

--2、查询和“002”号的同学学习的课程完全相同的其他同学学号和姓名；
select student_id, std.sname, count(course_id) course_taked
from score s
-- 与002学生选的课程，做左连接
left join (
    -- 002 选的课程 1, 3, 4
    select course_id
    from score
    where student_id = 002
) std002
    using(course_id)
join student std
    on s.student_id = std.sid
-- 除了002学生
where s.student_id <> 002
group by s.student_id, std.sname
-- 与002学生选了相同数量的课程
having course_taked = (
    select count(course_id)
    from score
    where student_id = 002
);


-- ××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
--无李平老师，中文乱码？？？？？
--3、删除学习“李平老师”老师课的SC表记录；
delete from score
where course_id =
    (
        select cid
        from course
        join teacher
            on course.teacher_id = teacher.tid
        where tname = '李平老师'
    )



--4、向SC表中插入一些记录，这些记录要求符合以下条件：①没有上过编号“002”课程的同学学号；②插入“002”号课程的平均成绩；
insert into score(student_id, course_id, num)
-- 数据集：没上过002课程的学生学号|课程002|002课程的平均成绩
select a.student_id, b.course_id, c.num
from
    (-- 没上过002课程的学生学号
    select sid as student_id
    from student std
    left join
        -- 上过002课程的学生
        (select student_id
        from score
        where course_id = 2
        ) std_take002
        on std.sid = std_take002.student_id
    where student_id is null) a,
    -- 课程002
    (select 2 as course_id) b,
    -- 002课程的平均成绩
    (select avg(num) as num
    from score
    where course_id = 2) c



--5、按平均成绩从低到高显示所有学生的“语文”、“数学”、“英语”三门的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；
select *
from
    (-- 纵表转横表
    select student_id,
        max(case when course_id = 1 then num else null end) as course1,
        max(case when course_id = 2 then num else null end) as course2,
        max(case when course_id = 3 then num else null end) as course3,
        max(case when course_id = 4 then num else null end) as course4,
        count(num) as course_taked
    from score
    group by student_id) a
join
    (select student_id,
        avg(num) as avg_score
    from score
    group by student_id) b
    using(student_id)
--order by avg_score


-- 分开使用是可以的
select student_id,
    avg(num) as avg_score
from score
group by student_id

select student_id,
    count(num) as course_taked
from score
group by student_id

-- ××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
-- 放在一起不行
select student_id,
    avg(num) as avg_score
    count(num) as course_taked
from score
group by student_id





6、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分；
select course_id, max(num) as max_score, min(num) as min_score
from score
group by course_id;



7、按各科平均成绩从低到高和及格率的百分数从高到低顺序；
select
    course_id,
    avg(num) avg_score,
    sum(case when num > 60 then 1 else 0 end)/count(num) as pass_rate
from score
group by course_id
order by avg_score, pass_rate desc


-- 各科平均成绩
select course_id, avg(num)
from score
group by course_id


-- 各科及格率
select
    course_id,
    sum(case when num > 60 then 1 else 0 end)/count(num) as pass_rate
from score
group by course_id;


-- 及格置1，否则置0
select
    course_id,
    case
        when num > 60 then 1
        else 0
    end
from score




8、查询各科成绩前三名的记录:(不考虑成绩并列情况)








9、查询每门课程被选修的学生数；
10、查询同名同姓学生名单，并统计同名人数；
11、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列；
12、查询平均成绩大于85的所有学生的学号、姓名和平均成绩；
13、查询课程名称为“数学”，且分数低于60的学生姓名和分数；
14、查询课程编号为003且课程成绩在80分以上的学生的学号和姓名；
15、求选了课程的学生人数
16、查询选修“杨艳”老师所授课程的学生中，成绩最高的学生姓名及其成绩；
17、查询各个课程及相应的选修人数；
18、查询不同课程但成绩相同的学生的学号、课程号、学生成绩；
19、查询每门课程成绩最好的前两名；
20、检索至少选修两门课程的学生学号；
21、查询全部学生都选修的课程的课程号和课程名；
22、查询没学过“叶平”老师讲授的任一门课程的学生姓名；
23、查询两门以上不及格课程的同学的学号及其平均成绩；
24、检索“004”课程分数小于60，按分数降序排列的同学学号；
25、删除“002”同学的“001”课程的成绩；













--每个部门最新入职的那个员工
select * from employee
where id in (select
            max(id)
            from employee
            group by dep_id);

select * from employee e
where id = (select
            max(id)
            from employee
            where dep_id=e.dep_id);

